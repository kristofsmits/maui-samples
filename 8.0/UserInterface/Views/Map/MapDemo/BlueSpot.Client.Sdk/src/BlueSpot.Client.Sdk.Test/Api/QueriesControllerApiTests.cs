/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BlueSpot.Client.Sdk.Client;
using BlueSpot.Client.Sdk.Api;
// uncomment below to import models
//using BlueSpot.Client.Sdk.Model;

namespace BlueSpot.Client.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing QueriesControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QueriesControllerApiTests : IDisposable
    {
        private QueriesControllerApi instance;

        public QueriesControllerApiTests()
        {
            instance = new QueriesControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of QueriesControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' QueriesControllerApi
            //Assert.IsType<QueriesControllerApi>(instance);
        }

        /// <summary>
        /// Test ExecuteQueryGet
        /// </summary>
        [Fact]
        public void ExecuteQueryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string queryName = null;
            //Dictionary<string, string> _params = null;
            //int? limit = null;
            //int? offset = null;
            //string view = null;
            //string fetchPlan = null;
            //bool? returnNulls = null;
            //bool? dynamicAttributes = null;
            //bool? returnCount = null;
            //string modelVersion = null;
            //var response = instance.ExecuteQueryGet(entityName, queryName, _params, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ExecuteQueryPost
        /// </summary>
        [Fact]
        public void ExecuteQueryPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string queryName = null;
            //string body = null;
            //int? limit = null;
            //int? offset = null;
            //string view = null;
            //string fetchPlan = null;
            //bool? returnNulls = null;
            //bool? dynamicAttributes = null;
            //bool? returnCount = null;
            //string modelVersion = null;
            //var response = instance.ExecuteQueryPost(entityName, queryName, body, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetCountGetText1
        /// </summary>
        [Fact]
        public void GetCountGetText1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string queryName = null;
            //Dictionary<string, string> _params = null;
            //string modelVersion = null;
            //var response = instance.GetCountGetText1(entityName, queryName, _params, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetCountPostText1
        /// </summary>
        [Fact]
        public void GetCountPostText1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string queryName = null;
            //string body = null;
            //string modelVersion = null;
            //var response = instance.GetCountPostText1(entityName, queryName, body, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test LoadQueriesList
        /// </summary>
        [Fact]
        public void LoadQueriesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //var response = instance.LoadQueriesList(entityName);
            //Assert.IsType<List<QueryInfo>>(response);
        }
    }
}
