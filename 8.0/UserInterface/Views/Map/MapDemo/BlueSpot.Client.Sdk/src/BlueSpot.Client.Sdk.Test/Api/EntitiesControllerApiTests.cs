/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BlueSpot.Client.Sdk.Client;
using BlueSpot.Client.Sdk.Api;

namespace BlueSpot.Client.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing EntitiesControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EntitiesControllerApiTests : IDisposable
    {
        private EntitiesControllerApi instance;

        public EntitiesControllerApiTests()
        {
            instance = new EntitiesControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EntitiesControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EntitiesControllerApi
            //Assert.IsType<EntitiesControllerApi>(instance);
        }

        /// <summary>
        /// Test CountSearchEntitiesListGet
        /// </summary>
        [Fact]
        public void CountSearchEntitiesListGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string filter = null;
            //string modelVersion = null;
            //var response = instance.CountSearchEntitiesListGet(entityName, filter, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test CountSearchEntitiesListPost
        /// </summary>
        [Fact]
        public void CountSearchEntitiesListPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string body = null;
            //var response = instance.CountSearchEntitiesListPost(entityName, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test CreateEntity
        /// </summary>
        [Fact]
        public void CreateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string body = null;
            //string responseView = null;
            //string responseFetchPlan = null;
            //string modelVersion = null;
            //var response = instance.CreateEntity(entityName, body, responseView, responseFetchPlan, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DeleteEntities
        /// </summary>
        [Fact]
        public void DeleteEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string body = null;
            //string modelVersion = null;
            //var response = instance.DeleteEntities(entityName, body, modelVersion);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test DeleteEntity
        /// </summary>
        [Fact]
        public void DeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string entityId = null;
            //string modelVersion = null;
            //var response = instance.DeleteEntity(entityName, entityId, modelVersion);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test LoadEntitiesList
        /// </summary>
        [Fact]
        public void LoadEntitiesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string fetchPlan = null;
            //int? limit = null;
            //int? offset = null;
            //string sort = null;
            //bool? returnNulls = null;
            //bool? returnCount = null;
            //bool? dynamicAttributes = null;
            //string modelVersion = null;
            //var response = instance.LoadEntitiesList(entityName, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test LoadEntity
        /// </summary>
        [Fact]
        public void LoadEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string entityId = null;
            //string fetchPlan = null;
            //bool? returnNulls = null;
            //bool? dynamicAttributes = null;
            //string modelVersion = null;
            //var response = instance.LoadEntity(entityName, entityId, fetchPlan, returnNulls, dynamicAttributes, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SearchEntitiesListGet
        /// </summary>
        [Fact]
        public void SearchEntitiesListGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string filter = null;
            //string fetchPlan = null;
            //int? limit = null;
            //int? offset = null;
            //string sort = null;
            //bool? returnNulls = null;
            //bool? returnCount = null;
            //bool? dynamicAttributes = null;
            //string modelVersion = null;
            //var response = instance.SearchEntitiesListGet(entityName, filter, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SearchEntitiesListPost
        /// </summary>
        [Fact]
        public void SearchEntitiesListPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string body = null;
            //var response = instance.SearchEntitiesListPost(entityName, body);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test UpdateEntities
        /// </summary>
        [Fact]
        public void UpdateEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string body = null;
            //string responseView = null;
            //string responseFetchPlan = null;
            //string modelVersion = null;
            //var response = instance.UpdateEntities(entityName, body, responseView, responseFetchPlan, modelVersion);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test UpdateEntity
        /// </summary>
        [Fact]
        public void UpdateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string entityId = null;
            //string body = null;
            //string responseView = null;
            //string responseFetchPlan = null;
            //string modelVersion = null;
            //var response = instance.UpdateEntity(entityName, entityId, body, responseView, responseFetchPlan, modelVersion);
            //Assert.IsType<string>(response);
        }
    }
}
