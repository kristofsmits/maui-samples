/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BlueSpot.Client.Sdk.Client;
using BlueSpot.Client.Sdk.Api;
// uncomment below to import models
//using BlueSpot.Client.Sdk.Model;

namespace BlueSpot.Client.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing EntitiesMetadataControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EntitiesMetadataControllerApiTests : IDisposable
    {
        private EntitiesMetadataControllerApi instance;

        public EntitiesMetadataControllerApiTests()
        {
            instance = new EntitiesMetadataControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EntitiesMetadataControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EntitiesMetadataControllerApi
            //Assert.IsType<EntitiesMetadataControllerApi>(instance);
        }

        /// <summary>
        /// Test GetAllFetchPlansForMetaClass
        /// </summary>
        [Fact]
        public void GetAllFetchPlansForMetaClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //var response = instance.GetAllFetchPlansForMetaClass(entityName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetAllMetaClassesInfo
        /// </summary>
        [Fact]
        public void GetAllMetaClassesInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllMetaClassesInfo();
            //Assert.IsType<List<MetaClassInfo>>(response);
        }

        /// <summary>
        /// Test GetAllViewsForMetaClass
        /// </summary>
        [Fact]
        public void GetAllViewsForMetaClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //var response = instance.GetAllViewsForMetaClass(entityName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetFetchPlan
        /// </summary>
        [Fact]
        public void GetFetchPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string fetchPlanName = null;
            //var response = instance.GetFetchPlan(entityName, fetchPlanName);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetMetaClassInfo
        /// </summary>
        [Fact]
        public void GetMetaClassInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //var response = instance.GetMetaClassInfo(entityName);
            //Assert.IsType<MetaClassInfo>(response);
        }

        /// <summary>
        /// Test GetView
        /// </summary>
        [Fact]
        public void GetViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityName = null;
            //string viewName = null;
            //var response = instance.GetView(entityName, viewName);
            //Assert.IsType<string>(response);
        }
    }
}
