/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlueSpot.Client.Sdk.Client;
using BlueSpot.Client.Sdk.Model;

namespace BlueSpot.Client.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueriesControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExecuteQueryGet(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExecuteQueryGetWithHttpInfo(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExecuteQueryPost(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExecuteQueryPostWithHttpInfo(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCountGetText1(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCountGetText1WithHttpInfo(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCountPostText1(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCountPostText1WithHttpInfo(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;QueryInfo&gt;</returns>
        List<QueryInfo> LoadQueriesList(string entityName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;QueryInfo&gt;</returns>
        ApiResponse<List<QueryInfo>> LoadQueriesListWithHttpInfo(string entityName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueriesControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExecuteQueryGetAsync(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExecuteQueryGetWithHttpInfoAsync(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExecuteQueryPostAsync(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExecuteQueryPostWithHttpInfoAsync(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCountGetText1Async(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCountGetText1WithHttpInfoAsync(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCountPostText1Async(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCountPostText1WithHttpInfoAsync(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QueryInfo&gt;</returns>
        System.Threading.Tasks.Task<List<QueryInfo>> LoadQueriesListAsync(string entityName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QueryInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QueryInfo>>> LoadQueriesListWithHttpInfoAsync(string entityName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueriesControllerApi : IQueriesControllerApiSync, IQueriesControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueriesControllerApi : IQueriesControllerApi
    {
        private BlueSpot.Client.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueriesControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueriesControllerApi(string basePath)
        {
            this.Configuration = BlueSpot.Client.Sdk.Client.Configuration.MergeConfigurations(
                BlueSpot.Client.Sdk.Client.GlobalConfiguration.Instance,
                new BlueSpot.Client.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueriesControllerApi(BlueSpot.Client.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlueSpot.Client.Sdk.Client.Configuration.MergeConfigurations(
                BlueSpot.Client.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueriesControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QueriesControllerApi(BlueSpot.Client.Sdk.Client.ISynchronousClient client, BlueSpot.Client.Sdk.Client.IAsynchronousClient asyncClient, BlueSpot.Client.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlueSpot.Client.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExecuteQueryGet(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = ExecuteQueryGetWithHttpInfo(entityName, queryName, _params, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> ExecuteQueryGetWithHttpInfo(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->ExecuteQueryGet");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->ExecuteQueryGet");
            }

            // verify the required parameter '_params' is set
            if (_params == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter '_params' when calling QueriesControllerApi->ExecuteQueryGet");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (view != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "view", view));
            }
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "params", _params));

            localVarRequestOptions.Operation = "QueriesControllerApi.ExecuteQueryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/queries/{entityName}/{queryName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteQueryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExecuteQueryGetAsync(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await ExecuteQueryGetWithHttpInfoAsync(entityName, queryName, _params, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> ExecuteQueryGetWithHttpInfoAsync(string entityName, string queryName, Dictionary<string, string> _params, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->ExecuteQueryGet");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->ExecuteQueryGet");
            }

            // verify the required parameter '_params' is set
            if (_params == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter '_params' when calling QueriesControllerApi->ExecuteQueryGet");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (view != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "view", view));
            }
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "params", _params));

            localVarRequestOptions.Operation = "QueriesControllerApi.ExecuteQueryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/queries/{entityName}/{queryName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteQueryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExecuteQueryPost(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = ExecuteQueryPostWithHttpInfo(entityName, queryName, body, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> ExecuteQueryPostWithHttpInfo(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->ExecuteQueryPost");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->ExecuteQueryPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling QueriesControllerApi->ExecuteQueryPost");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (view != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "view", view));
            }
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueriesControllerApi.ExecuteQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/rest/queries/{entityName}/{queryName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExecuteQueryPostAsync(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await ExecuteQueryPostWithHttpInfoAsync(entityName, queryName, body, limit, offset, view, fetchPlan, returnNulls, dynamicAttributes, returnCount, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="view"> (optional)</param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> ExecuteQueryPostWithHttpInfoAsync(string entityName, string queryName, string body, int? limit = default(int?), int? offset = default(int?), string view = default(string), string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), bool? returnCount = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->ExecuteQueryPost");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->ExecuteQueryPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling QueriesControllerApi->ExecuteQueryPost");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (view != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "view", view));
            }
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueriesControllerApi.ExecuteQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/rest/queries/{entityName}/{queryName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCountGetText1(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = GetCountGetText1WithHttpInfo(entityName, queryName, _params, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> GetCountGetText1WithHttpInfo(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->GetCountGetText1");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->GetCountGetText1");
            }

            // verify the required parameter '_params' is set
            if (_params == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter '_params' when calling QueriesControllerApi->GetCountGetText1");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain;charset=UTF-8",
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "params", _params));

            localVarRequestOptions.Operation = "QueriesControllerApi.GetCountGetText1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/queries/{entityName}/{queryName}/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountGetText1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCountGetText1Async(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await GetCountGetText1WithHttpInfoAsync(entityName, queryName, _params, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="_params"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> GetCountGetText1WithHttpInfoAsync(string entityName, string queryName, Dictionary<string, string> _params, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->GetCountGetText1");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->GetCountGetText1");
            }

            // verify the required parameter '_params' is set
            if (_params == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter '_params' when calling QueriesControllerApi->GetCountGetText1");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain;charset=UTF-8",
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "params", _params));

            localVarRequestOptions.Operation = "QueriesControllerApi.GetCountGetText1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/queries/{entityName}/{queryName}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountGetText1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCountPostText1(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = GetCountPostText1WithHttpInfo(entityName, queryName, body, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> GetCountPostText1WithHttpInfo(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->GetCountPostText1");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->GetCountPostText1");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling QueriesControllerApi->GetCountPostText1");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain;charset=UTF-8",
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueriesControllerApi.GetCountPostText1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/rest/queries/{entityName}/{queryName}/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountPostText1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCountPostText1Async(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await GetCountPostText1WithHttpInfoAsync(entityName, queryName, body, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="queryName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> GetCountPostText1WithHttpInfoAsync(string entityName, string queryName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->GetCountPostText1");
            }

            // verify the required parameter 'queryName' is set
            if (queryName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'queryName' when calling QueriesControllerApi->GetCountPostText1");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling QueriesControllerApi->GetCountPostText1");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain;charset=UTF-8",
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("queryName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(queryName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "QueriesControllerApi.GetCountPostText1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/rest/queries/{entityName}/{queryName}/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountPostText1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;QueryInfo&gt;</returns>
        public List<QueryInfo> LoadQueriesList(string entityName, int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<List<QueryInfo>> localVarResponse = LoadQueriesListWithHttpInfo(entityName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;QueryInfo&gt;</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<List<QueryInfo>> LoadQueriesListWithHttpInfo(string entityName, int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->LoadQueriesList");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter

            localVarRequestOptions.Operation = "QueriesControllerApi.LoadQueriesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<QueryInfo>>("/rest/queries/{entityName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadQueriesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QueryInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<QueryInfo>> LoadQueriesListAsync(string entityName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<List<QueryInfo>> localVarResponse = await LoadQueriesListWithHttpInfoAsync(entityName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QueryInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<List<QueryInfo>>> LoadQueriesListWithHttpInfoAsync(string entityName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling QueriesControllerApi->LoadQueriesList");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter

            localVarRequestOptions.Operation = "QueriesControllerApi.LoadQueriesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<QueryInfo>>("/rest/queries/{entityName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadQueriesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
