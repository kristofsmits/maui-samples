/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlueSpot.Client.Sdk.Client.OpenAPIDateConverter;

namespace BlueSpot.Client.Sdk.Model
{
    /// <summary>
    /// MetaClassInfo
    /// </summary>
    [DataContract(Name = "MetaClassInfo")]
    public partial class MetaClassInfo : IEquatable<MetaClassInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaClassInfo" /> class.
        /// </summary>
        /// <param name="entityName">entityName.</param>
        /// <param name="ancestor">ancestor.</param>
        /// <param name="properties">properties.</param>
        public MetaClassInfo(string entityName = default(string), string ancestor = default(string), List<MetaPropertyInfo> properties = default(List<MetaPropertyInfo>))
        {
            this.EntityName = entityName;
            this.Ancestor = ancestor;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets EntityName
        /// </summary>
        [DataMember(Name = "entityName", EmitDefaultValue = false)]
        public string EntityName { get; set; }

        /// <summary>
        /// Gets or Sets Ancestor
        /// </summary>
        [DataMember(Name = "ancestor", EmitDefaultValue = false)]
        public string Ancestor { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<MetaPropertyInfo> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetaClassInfo {\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Ancestor: ").Append(Ancestor).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaClassInfo);
        }

        /// <summary>
        /// Returns true if MetaClassInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaClassInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaClassInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.Ancestor == input.Ancestor ||
                    (this.Ancestor != null &&
                    this.Ancestor.Equals(input.Ancestor))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.Ancestor != null)
                {
                    hashCode = (hashCode * 59) + this.Ancestor.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
