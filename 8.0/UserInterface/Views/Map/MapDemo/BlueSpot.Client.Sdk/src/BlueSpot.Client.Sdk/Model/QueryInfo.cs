/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlueSpot.Client.Sdk.Client.OpenAPIDateConverter;

namespace BlueSpot.Client.Sdk.Model
{
    /// <summary>
    /// QueryInfo
    /// </summary>
    [DataContract(Name = "QueryInfo")]
    public partial class QueryInfo : IEquatable<QueryInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryInfo" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="jpql">jpql.</param>
        /// <param name="entityName">entityName.</param>
        /// <param name="viewName">viewName.</param>
        /// <param name="fetchPlanName">fetchPlanName.</param>
        /// <param name="limit">limit.</param>
        /// <param name="offset">offset.</param>
        /// <param name="cacheable">cacheable.</param>
        /// <param name="anonymousAllowed">anonymousAllowed.</param>
        /// <param name="_params">_params.</param>
        public QueryInfo(string name = default(string), string jpql = default(string), string entityName = default(string), string viewName = default(string), string fetchPlanName = default(string), int limit = default(int), int offset = default(int), bool cacheable = default(bool), bool anonymousAllowed = default(bool), List<QueryParamInfo> _params = default(List<QueryParamInfo>))
        {
            this.Name = name;
            this.Jpql = jpql;
            this.EntityName = entityName;
            this.ViewName = viewName;
            this.FetchPlanName = fetchPlanName;
            this.Limit = limit;
            this.Offset = offset;
            this.Cacheable = cacheable;
            this.AnonymousAllowed = anonymousAllowed;
            this.Params = _params;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Jpql
        /// </summary>
        [DataMember(Name = "jpql", EmitDefaultValue = false)]
        public string Jpql { get; set; }

        /// <summary>
        /// Gets or Sets EntityName
        /// </summary>
        [DataMember(Name = "entityName", EmitDefaultValue = false)]
        public string EntityName { get; set; }

        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name = "viewName", EmitDefaultValue = false)]
        public string ViewName { get; set; }

        /// <summary>
        /// Gets or Sets FetchPlanName
        /// </summary>
        [DataMember(Name = "fetchPlanName", EmitDefaultValue = false)]
        public string FetchPlanName { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Cacheable
        /// </summary>
        [DataMember(Name = "cacheable", EmitDefaultValue = true)]
        public bool Cacheable { get; set; }

        /// <summary>
        /// Gets or Sets AnonymousAllowed
        /// </summary>
        [DataMember(Name = "anonymousAllowed", EmitDefaultValue = true)]
        public bool AnonymousAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public List<QueryParamInfo> Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Jpql: ").Append(Jpql).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("  FetchPlanName: ").Append(FetchPlanName).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Cacheable: ").Append(Cacheable).Append("\n");
            sb.Append("  AnonymousAllowed: ").Append(AnonymousAllowed).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryInfo);
        }

        /// <summary>
        /// Returns true if QueryInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Jpql == input.Jpql ||
                    (this.Jpql != null &&
                    this.Jpql.Equals(input.Jpql))
                ) && 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.ViewName == input.ViewName ||
                    (this.ViewName != null &&
                    this.ViewName.Equals(input.ViewName))
                ) && 
                (
                    this.FetchPlanName == input.FetchPlanName ||
                    (this.FetchPlanName != null &&
                    this.FetchPlanName.Equals(input.FetchPlanName))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Cacheable == input.Cacheable ||
                    this.Cacheable.Equals(input.Cacheable)
                ) && 
                (
                    this.AnonymousAllowed == input.AnonymousAllowed ||
                    this.AnonymousAllowed.Equals(input.AnonymousAllowed)
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Jpql != null)
                {
                    hashCode = (hashCode * 59) + this.Jpql.GetHashCode();
                }
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.ViewName != null)
                {
                    hashCode = (hashCode * 59) + this.ViewName.GetHashCode();
                }
                if (this.FetchPlanName != null)
                {
                    hashCode = (hashCode * 59) + this.FetchPlanName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Cacheable.GetHashCode();
                hashCode = (hashCode * 59) + this.AnonymousAllowed.GetHashCode();
                if (this.Params != null)
                {
                    hashCode = (hashCode * 59) + this.Params.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
