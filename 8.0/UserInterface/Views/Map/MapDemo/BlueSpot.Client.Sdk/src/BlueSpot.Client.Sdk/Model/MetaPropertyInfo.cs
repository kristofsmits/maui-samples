/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlueSpot.Client.Sdk.Client.OpenAPIDateConverter;

namespace BlueSpot.Client.Sdk.Model
{
    /// <summary>
    /// MetaPropertyInfo
    /// </summary>
    [DataContract(Name = "MetaPropertyInfo")]
    public partial class MetaPropertyInfo : IEquatable<MetaPropertyInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines AttributeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributeTypeEnum
        {
            /// <summary>
            /// Enum DATATYPE for value: DATATYPE
            /// </summary>
            [EnumMember(Value = "DATATYPE")]
            DATATYPE = 1,

            /// <summary>
            /// Enum ENUM for value: ENUM
            /// </summary>
            [EnumMember(Value = "ENUM")]
            ENUM = 2,

            /// <summary>
            /// Enum ASSOCIATION for value: ASSOCIATION
            /// </summary>
            [EnumMember(Value = "ASSOCIATION")]
            ASSOCIATION = 3,

            /// <summary>
            /// Enum COMPOSITION for value: COMPOSITION
            /// </summary>
            [EnumMember(Value = "COMPOSITION")]
            COMPOSITION = 4,

            /// <summary>
            /// Enum EMBEDDED for value: EMBEDDED
            /// </summary>
            [EnumMember(Value = "EMBEDDED")]
            EMBEDDED = 5

        }


        /// <summary>
        /// Gets or Sets AttributeType
        /// </summary>
        [DataMember(Name = "attributeType", EmitDefaultValue = false)]
        public AttributeTypeEnum? AttributeType { get; set; }
        /// <summary>
        /// Defines Cardinality
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardinalityEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum ONETOONE for value: ONE_TO_ONE
            /// </summary>
            [EnumMember(Value = "ONE_TO_ONE")]
            ONETOONE = 2,

            /// <summary>
            /// Enum MANYTOONE for value: MANY_TO_ONE
            /// </summary>
            [EnumMember(Value = "MANY_TO_ONE")]
            MANYTOONE = 3,

            /// <summary>
            /// Enum ONETOMANY for value: ONE_TO_MANY
            /// </summary>
            [EnumMember(Value = "ONE_TO_MANY")]
            ONETOMANY = 4,

            /// <summary>
            /// Enum MANYTOMANY for value: MANY_TO_MANY
            /// </summary>
            [EnumMember(Value = "MANY_TO_MANY")]
            MANYTOMANY = 5

        }


        /// <summary>
        /// Gets or Sets Cardinality
        /// </summary>
        [DataMember(Name = "cardinality", EmitDefaultValue = false)]
        public CardinalityEnum? Cardinality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaPropertyInfo" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="attributeType">attributeType.</param>
        /// <param name="type">type.</param>
        /// <param name="cardinality">cardinality.</param>
        /// <param name="mandatory">mandatory.</param>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="description">description.</param>
        /// <param name="persistent">persistent.</param>
        public MetaPropertyInfo(string name = default(string), AttributeTypeEnum? attributeType = default(AttributeTypeEnum?), string type = default(string), CardinalityEnum? cardinality = default(CardinalityEnum?), bool mandatory = default(bool), bool readOnly = default(bool), string description = default(string), bool persistent = default(bool))
        {
            this.Name = name;
            this.AttributeType = attributeType;
            this.Type = type;
            this.Cardinality = cardinality;
            this.Mandatory = mandatory;
            this.ReadOnly = readOnly;
            this.Description = description;
            this.Persistent = persistent;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Mandatory
        /// </summary>
        [DataMember(Name = "mandatory", EmitDefaultValue = true)]
        public bool Mandatory { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Persistent
        /// </summary>
        [DataMember(Name = "persistent", EmitDefaultValue = true)]
        public bool Persistent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetaPropertyInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  Mandatory: ").Append(Mandatory).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Persistent: ").Append(Persistent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaPropertyInfo);
        }

        /// <summary>
        /// Returns true if MetaPropertyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaPropertyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaPropertyInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AttributeType == input.AttributeType ||
                    this.AttributeType.Equals(input.AttributeType)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Cardinality == input.Cardinality ||
                    this.Cardinality.Equals(input.Cardinality)
                ) && 
                (
                    this.Mandatory == input.Mandatory ||
                    this.Mandatory.Equals(input.Mandatory)
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Persistent == input.Persistent ||
                    this.Persistent.Equals(input.Persistent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttributeType.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cardinality.GetHashCode();
                hashCode = (hashCode * 59) + this.Mandatory.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Persistent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
