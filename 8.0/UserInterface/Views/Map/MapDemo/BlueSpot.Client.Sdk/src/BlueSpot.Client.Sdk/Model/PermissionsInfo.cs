/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlueSpot.Client.Sdk.Client.OpenAPIDateConverter;

namespace BlueSpot.Client.Sdk.Model
{
    /// <summary>
    /// PermissionsInfo
    /// </summary>
    [DataContract(Name = "PermissionsInfo")]
    public partial class PermissionsInfo : IEquatable<PermissionsInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsInfo" /> class.
        /// </summary>
        /// <param name="authorities">authorities.</param>
        /// <param name="entities">entities.</param>
        /// <param name="entityAttributes">entityAttributes.</param>
        /// <param name="specifics">specifics.</param>
        public PermissionsInfo(List<string> authorities = default(List<string>), List<ShortPermissionInfo> entities = default(List<ShortPermissionInfo>), List<ShortPermissionInfo> entityAttributes = default(List<ShortPermissionInfo>), List<ShortPermissionInfo> specifics = default(List<ShortPermissionInfo>))
        {
            this.Authorities = authorities;
            this.Entities = entities;
            this.EntityAttributes = entityAttributes;
            this.Specifics = specifics;
        }

        /// <summary>
        /// Gets or Sets Authorities
        /// </summary>
        [DataMember(Name = "authorities", EmitDefaultValue = false)]
        public List<string> Authorities { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<ShortPermissionInfo> Entities { get; set; }

        /// <summary>
        /// Gets or Sets EntityAttributes
        /// </summary>
        [DataMember(Name = "entityAttributes", EmitDefaultValue = false)]
        public List<ShortPermissionInfo> EntityAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Specifics
        /// </summary>
        [DataMember(Name = "specifics", EmitDefaultValue = false)]
        public List<ShortPermissionInfo> Specifics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionsInfo {\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  EntityAttributes: ").Append(EntityAttributes).Append("\n");
            sb.Append("  Specifics: ").Append(Specifics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionsInfo);
        }

        /// <summary>
        /// Returns true if PermissionsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionsInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Authorities == input.Authorities ||
                    this.Authorities != null &&
                    input.Authorities != null &&
                    this.Authorities.SequenceEqual(input.Authorities)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.EntityAttributes == input.EntityAttributes ||
                    this.EntityAttributes != null &&
                    input.EntityAttributes != null &&
                    this.EntityAttributes.SequenceEqual(input.EntityAttributes)
                ) && 
                (
                    this.Specifics == input.Specifics ||
                    this.Specifics != null &&
                    input.Specifics != null &&
                    this.Specifics.SequenceEqual(input.Specifics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authorities != null)
                {
                    hashCode = (hashCode * 59) + this.Authorities.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                if (this.EntityAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.EntityAttributes.GetHashCode();
                }
                if (this.Specifics != null)
                {
                    hashCode = (hashCode * 59) + this.Specifics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
