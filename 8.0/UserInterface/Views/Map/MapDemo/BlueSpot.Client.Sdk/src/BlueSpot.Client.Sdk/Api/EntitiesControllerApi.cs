/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlueSpot.Client.Sdk.Client;

namespace BlueSpot.Client.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitiesControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CountSearchEntitiesListGet(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CountSearchEntitiesListGetWithHttpInfo(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CountSearchEntitiesListPost(string entityName, string body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CountSearchEntitiesListPostWithHttpInfo(string entityName, string body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CreateEntity(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateEntityWithHttpInfo(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteEntities(string entityName, string body, string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEntitiesWithHttpInfo(string entityName, string body, string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteEntity(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEntityWithHttpInfo(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string LoadEntitiesList(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LoadEntitiesListWithHttpInfo(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string LoadEntity(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LoadEntityWithHttpInfo(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SearchEntitiesListGet(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchEntitiesListGetWithHttpInfo(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SearchEntitiesListPost(string entityName, string body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchEntitiesListPostWithHttpInfo(string entityName, string body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateEntities(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateEntitiesWithHttpInfo(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateEntity(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateEntityWithHttpInfo(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitiesControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CountSearchEntitiesListGetAsync(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CountSearchEntitiesListGetWithHttpInfoAsync(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CountSearchEntitiesListPostAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CountSearchEntitiesListPostWithHttpInfoAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateEntityAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateEntityWithHttpInfoAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEntitiesAsync(string entityName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntitiesWithHttpInfoAsync(string entityName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEntityAsync(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntityWithHttpInfoAsync(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LoadEntitiesListAsync(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LoadEntitiesListWithHttpInfoAsync(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LoadEntityAsync(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LoadEntityWithHttpInfoAsync(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchEntitiesListGetAsync(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchEntitiesListGetWithHttpInfoAsync(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchEntitiesListPostAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchEntitiesListPostWithHttpInfoAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateEntitiesAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateEntitiesWithHttpInfoAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateEntityAsync(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateEntityWithHttpInfoAsync(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitiesControllerApi : IEntitiesControllerApiSync, IEntitiesControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntitiesControllerApi : IEntitiesControllerApi
    {
        private BlueSpot.Client.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitiesControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitiesControllerApi(string basePath)
        {
            this.Configuration = BlueSpot.Client.Sdk.Client.Configuration.MergeConfigurations(
                BlueSpot.Client.Sdk.Client.GlobalConfiguration.Instance,
                new BlueSpot.Client.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntitiesControllerApi(BlueSpot.Client.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlueSpot.Client.Sdk.Client.Configuration.MergeConfigurations(
                BlueSpot.Client.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlueSpot.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntitiesControllerApi(BlueSpot.Client.Sdk.Client.ISynchronousClient client, BlueSpot.Client.Sdk.Client.IAsynchronousClient asyncClient, BlueSpot.Client.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlueSpot.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlueSpot.Client.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueSpot.Client.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CountSearchEntitiesListGet(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = CountSearchEntitiesListGetWithHttpInfo(entityName, filter, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> CountSearchEntitiesListGetWithHttpInfo(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CountSearchEntitiesListGet");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'filter' when calling EntitiesControllerApi->CountSearchEntitiesListGet");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.CountSearchEntitiesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/entities/{entityName}/search/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountSearchEntitiesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CountSearchEntitiesListGetAsync(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await CountSearchEntitiesListGetWithHttpInfoAsync(entityName, filter, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> CountSearchEntitiesListGetWithHttpInfoAsync(string entityName, string filter, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CountSearchEntitiesListGet");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'filter' when calling EntitiesControllerApi->CountSearchEntitiesListGet");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.CountSearchEntitiesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/entities/{entityName}/search/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountSearchEntitiesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CountSearchEntitiesListPost(string entityName, string body, int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = CountSearchEntitiesListPostWithHttpInfo(entityName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> CountSearchEntitiesListPostWithHttpInfo(string entityName, string body, int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CountSearchEntitiesListPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->CountSearchEntitiesListPost");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.CountSearchEntitiesListPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/rest/entities/{entityName}/search/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountSearchEntitiesListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CountSearchEntitiesListPostAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await CountSearchEntitiesListPostWithHttpInfoAsync(entityName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> CountSearchEntitiesListPostWithHttpInfoAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CountSearchEntitiesListPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->CountSearchEntitiesListPost");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.CountSearchEntitiesListPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/rest/entities/{entityName}/search/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountSearchEntitiesListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CreateEntity(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = CreateEntityWithHttpInfo(entityName, body, responseView, responseFetchPlan, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> CreateEntityWithHttpInfo(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CreateEntity");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->CreateEntity");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.CreateEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateEntityAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await CreateEntityWithHttpInfoAsync(entityName, body, responseView, responseFetchPlan, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> CreateEntityWithHttpInfoAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->CreateEntity");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->CreateEntity");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.CreateEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteEntities(string entityName, string body, string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteEntitiesWithHttpInfo(entityName, body, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<Object> DeleteEntitiesWithHttpInfo(string entityName, string body, string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->DeleteEntities");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->DeleteEntities");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.DeleteEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEntitiesAsync(string entityName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteEntitiesWithHttpInfoAsync(entityName, body, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<Object>> DeleteEntitiesWithHttpInfoAsync(string entityName, string body, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->DeleteEntities");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->DeleteEntities");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.DeleteEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteEntity(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteEntityWithHttpInfo(entityName, entityId, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<Object> DeleteEntityWithHttpInfo(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->DeleteEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->DeleteEntity");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.DeleteEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEntityAsync(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteEntityWithHttpInfoAsync(entityName, entityId, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<Object>> DeleteEntityWithHttpInfoAsync(string entityName, string entityId, string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->DeleteEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->DeleteEntity");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.DeleteEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string LoadEntitiesList(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = LoadEntitiesListWithHttpInfo(entityName, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> LoadEntitiesListWithHttpInfo(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->LoadEntitiesList");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.LoadEntitiesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadEntitiesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LoadEntitiesListAsync(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await LoadEntitiesListWithHttpInfoAsync(entityName, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> LoadEntitiesListWithHttpInfoAsync(string entityName, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->LoadEntitiesList");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.LoadEntitiesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadEntitiesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string LoadEntity(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = LoadEntityWithHttpInfo(entityName, entityId, fetchPlan, returnNulls, dynamicAttributes, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> LoadEntityWithHttpInfo(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->LoadEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->LoadEntity");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.LoadEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LoadEntityAsync(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await LoadEntityWithHttpInfoAsync(entityName, entityId, fetchPlan, returnNulls, dynamicAttributes, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> LoadEntityWithHttpInfoAsync(string entityName, string entityId, string fetchPlan = default(string), bool? returnNulls = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->LoadEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->LoadEntity");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.LoadEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SearchEntitiesListGet(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = SearchEntitiesListGetWithHttpInfo(entityName, filter, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> SearchEntitiesListGetWithHttpInfo(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->SearchEntitiesListGet");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'filter' when calling EntitiesControllerApi->SearchEntitiesListGet");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.SearchEntitiesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/rest/entities/{entityName}/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchEntitiesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchEntitiesListGetAsync(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await SearchEntitiesListGetWithHttpInfoAsync(entityName, filter, fetchPlan, limit, offset, sort, returnNulls, returnCount, dynamicAttributes, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="filter"></param>
        /// <param name="fetchPlan"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="returnNulls"> (optional)</param>
        /// <param name="returnCount"> (optional)</param>
        /// <param name="dynamicAttributes"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> SearchEntitiesListGetWithHttpInfoAsync(string entityName, string filter, string fetchPlan = default(string), int? limit = default(int?), int? offset = default(int?), string sort = default(string), bool? returnNulls = default(bool?), bool? returnCount = default(bool?), bool? dynamicAttributes = default(bool?), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->SearchEntitiesListGet");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'filter' when calling EntitiesControllerApi->SearchEntitiesListGet");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (fetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fetchPlan", fetchPlan));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (returnNulls != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnNulls", returnNulls));
            }
            if (returnCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "returnCount", returnCount));
            }
            if (dynamicAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dynamicAttributes", dynamicAttributes));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }

            localVarRequestOptions.Operation = "EntitiesControllerApi.SearchEntitiesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/rest/entities/{entityName}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchEntitiesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SearchEntitiesListPost(string entityName, string body, int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = SearchEntitiesListPostWithHttpInfo(entityName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> SearchEntitiesListPostWithHttpInfo(string entityName, string body, int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->SearchEntitiesListPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->SearchEntitiesListPost");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.SearchEntitiesListPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/rest/entities/{entityName}/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchEntitiesListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchEntitiesListPostAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await SearchEntitiesListPostWithHttpInfoAsync(entityName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> SearchEntitiesListPostWithHttpInfoAsync(string entityName, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->SearchEntitiesListPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->SearchEntitiesListPost");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.SearchEntitiesListPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/rest/entities/{entityName}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchEntitiesListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateEntities(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = UpdateEntitiesWithHttpInfo(entityName, body, responseView, responseFetchPlan, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> UpdateEntitiesWithHttpInfo(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->UpdateEntities");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->UpdateEntities");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.UpdateEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateEntitiesAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await UpdateEntitiesWithHttpInfoAsync(entityName, body, responseView, responseFetchPlan, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> UpdateEntitiesWithHttpInfoAsync(string entityName, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->UpdateEntities");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->UpdateEntities");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.UpdateEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/rest/entities/{entityName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateEntity(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = UpdateEntityWithHttpInfo(entityName, entityId, body, responseView, responseFetchPlan, modelVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public BlueSpot.Client.Sdk.Client.ApiResponse<string> UpdateEntityWithHttpInfo(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->UpdateEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->UpdateEntity");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->UpdateEntity");
            }

            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.UpdateEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateEntityAsync(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlueSpot.Client.Sdk.Client.ApiResponse<string> localVarResponse = await UpdateEntityWithHttpInfoAsync(entityName, entityId, body, responseView, responseFetchPlan, modelVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BlueSpot.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName"></param>
        /// <param name="entityId"></param>
        /// <param name="body"></param>
        /// <param name="responseView"> (optional)</param>
        /// <param name="responseFetchPlan"> (optional)</param>
        /// <param name="modelVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<BlueSpot.Client.Sdk.Client.ApiResponse<string>> UpdateEntityWithHttpInfoAsync(string entityName, string entityId, string body, string responseView = default(string), string responseFetchPlan = default(string), string modelVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityName' when calling EntitiesControllerApi->UpdateEntity");
            }

            // verify the required parameter 'entityId' is set
            if (entityId == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'entityId' when calling EntitiesControllerApi->UpdateEntity");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new BlueSpot.Client.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling EntitiesControllerApi->UpdateEntity");
            }


            BlueSpot.Client.Sdk.Client.RequestOptions localVarRequestOptions = new BlueSpot.Client.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlueSpot.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityName", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityName)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityId", BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (responseView != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseView", responseView));
            }
            if (responseFetchPlan != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "responseFetchPlan", responseFetchPlan));
            }
            if (modelVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(BlueSpot.Client.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modelVersion", modelVersion));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EntitiesControllerApi.UpdateEntity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/rest/entities/{entityName}/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEntity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
